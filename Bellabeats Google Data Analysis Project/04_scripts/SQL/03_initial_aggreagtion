-- Total Steps Overall (single value)
create table total_steps_overall As
SELECT SUM(TotalSteps) AS TotalSteps
FROM clean_daily_activity;

-- Total Steps by User Id
create table total_steps_per_user as
SELECT Id, SUM(TotalSteps) AS TotalSteps
FROM clean_daily_activity
GROUP BY Id
ORDER BY TotalSteps DESC;

SELECT Id, COUNT(*) AS record_count
FROM total_steps_per_user
GROUP BY Id
HAVING COUNT(*) > 1;


-- Total steps by date (all users combined)
create table total_steps_per_date As
SELECT ActivityDate, SUM(TotalSteps) AS TotalSteps
FROM clean_daily_activity
GROUP BY ActivityDate
ORDER BY ActivityDate;

-- Total steps per user per day
create table total_steps_per_user_date as
SELECT Id, ActivityDate, SUM(TotalSteps) AS TotalSteps
FROM clean_daily_activity
GROUP BY Id, ActivityDate
ORDER BY Id, ActivityDate;

-- Average Very/Fairly/Lightly Active Minutes
CREATE TABLE avg_activity_type AS
SELECT 
    CAST(AVG(VeryActiveMinutes) AS DECIMAL(10,2)) AS AvgVeryActive,
    CAST(AVG(FairlyActiveMinutes) AS DECIMAL(10,2)) AS AvgFairlyActive,
    CAST(AVG(LightlyActiveMinutes) AS DECIMAL(10,2)) AS AvgLightlyActive
FROM clean_daily_activity;

-- Average Total Active Minutes (all users/dates)
CREATE TABLE avg_total_active_overall AS
SELECT 
    CAST(AVG(VeryActiveMinutes + FairlyActiveMinutes + LightlyActiveMinutes) AS FLOAT) AS AvgActiveMinutes
FROM clean_daily_activity;

-- Average Active Minutes by User
create table avg_active_per_user as
select Id, cast(avg(VeryActiveMinutes + FairlyActiveMinutes + LightlyActiveMinutes)as float) as AvgActiveMinutes 
from clean_daily_activity
group by Id
order by AvgActiveMinutes desc;

-- Average Active Minutes by Date (all users)
create table avg_active_per_date as
select ActivityDate,
cast(avg(VeryActiveMinutes + FairlyActiveMinutes + LightlyActiveMinutes) as float) as AvgActiveMinutes
from clean_daily_activity
group by ActivityDate
order by ActivityDate;

-- Average Active Minutes per User by Date
create table avg_active_per_user_date as
select Id, ActivityDate,
cast(avg(VeryActiveMinutes + FairlyActiveMinutes + LightlyActiveMinutes) as float) as AvgActiveMinutes
from clean_daily_activity
group by Id, ActivityDate
order by Id, ActivityDate;

-- Overall Average Sedentary Minutes
create table avg_sedentary_overall as
select cast(avg(SedentaryMinutes) as float) as AvgSedentaryMinutes
from clean_daily_activity;

-- Average Sedentary per User
create table avg_sedentary_per_user as
select Id, cast(avg(SedentaryMinutes)as float) as AvgSedentaryMinutes
from clean_daily_activity
group by Id
order by AvgSedentaryMinutes desc;

-- Average Sedentary Activity by Date
create table avg_sedentary_per_date as
select ActivityDate, cast(avg(SedentaryMinutes) as float) as AvgSedentaryMinutes
from clean_daily_activity
group by ActivityDate
order by ActivityDate;

-- Average Sedentary Activity by User by Date
create table avg_sedentary_per_user_date as
select Id, ActivityDate, cast(avg(SedentaryMinutes) as float) as AvgSedentaryMinutes
from clean_daily_activity
group by Id, ActivityDate
order by Id, ActivityDate;

-- Overall Average Calories Logged
create table avg_calories_overall as
select cast(avg(Calories) as float) as AvgCalories
from clean_daily_activity;

-- Average Calories by User
create table avg_calories_per_user as
select Id, cast(avg(Calories) as float) as AvgCalories
from clean_daily_activity
group by Id
Order by AvgCalories desc;

-- Average Calories by Date (All Users)
create table avg_calories_per_date as
select ActivityDate, cast(avg(Calories) as float) as AvgCalories
from clean_daily_activity
group by ActivityDate
Order by ActivityDate;

-- Average Calories by User by Date
create table avg_calories_per_user_date as
select Id, ActivityDate, cast(avg(Calories)as float) as AvgCalories
from clean_daily_activity
group by Id, ActivityDate
order by Id, ActivityDate;

-- Overall Sleep Metrics
create table avg_sleep_overall as
select cast(avg(TotalMinutesAsleep) as float) as AvgMinutesSleep,
cast(avg(TotalTimeInBed) as float) as AvgTimeInBed,
cast(avg(TotalMinutesAsleep / Nullif(TotalTimeInBed,0)*100) as float) as AvgSleepEfficiency
from sleep_day;

-- Sleep by User
create table avg_sleep_per_user as
select Id, cast(avg(TotalMinutesAsleep) as float) as AvgMinutesAsleep,
cast(avg(TotalTimeInBed) as float) as AvgTimeInBed,
cast(avg(TotalMinutesAsleep / nullif(TotalTimeInBed,0)*100) as float) as AvgSleepEfficiency
from sleep_day
group by Id
order by AvgSleepEfficiency;

-- Sleep by Date
create table avg_sleep_per_date as
select ActivityDate, cast(avg(TotalMinutesAsleep) as float) as AvgMinutesAsleep,
cast(avg(TotalTimeInBed) as float) as AvgTimeInBed,
cast(avg(TotalMinutesAsleep / nullif (TotalTimeInBed,0)*100) as float) as AvgSleepEfficiency
from sleep_day
group by Id, ActivityDate
Order by AvgSleepEfficiency;

-- Sleep by User by Date
create table avg_sleep_per_user_date as
select Id, ActivityDate, cast(avg(TotalMinutesAsleep) as float) as AvgMinutesAsleep,
cast(avg(TotalTimeInBed) as float) as AvgTimeInBed,
cast(avg(TotalMinutesAsleep / nullif (TotalTimeInBed, 0)* 100) as float) as AvgSleepEfficiency
from sleep_day
group by Id, ActivityDate
order by Id, ActivityDate;

-- Daily Activity Summary (Active vs Sedentary)
CREATE TABLE daily_activity_summary AS
SELECT 
    a.Id, 
    a.ActivityDate, 
    a.TotalSteps, 
    a.Calories,
    cast((a.VeryActiveMinutes + a.FairlyActiveMinutes + a.LightlyActiveMinutes)as float) AS TotalActiveMinutes,
    a.SedentaryMinutes, 
    s.TotalMinutesAsleep, 
    s.TotalTimeInBed,
    CASE 
        WHEN s.TotalTimeInBed > 0 
        THEN cast(((s.TotalMinutesAsleep / s.TotalTimeInBed) * 100) as float)
        ELSE NULL 
    END AS SleepEfficiency
FROM clean_daily_activity a
LEFT JOIN sleep_day s 
    ON a.Id = s.Id 
   AND a.ActivityDate = s.ActivityDate;
   
